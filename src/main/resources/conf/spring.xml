<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
   http://www.springframework.org/schema/beans 
   http://www.springframework.org/schema/beans/spring-beans-4.1.7.RELEASE.xsd
   http://www.springframework.org/schema/aop 
   http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
   http://www.springframework.org/schema/tx 
   http://www.springframework.org/schema/tx/spring-tx-4.1.7.RELEASE.xsd
   http://www.springframework.org/schema/context
   http://www.springframework.org/schema/context/spring-context-4.1.7.RELEASE.xsd">
	<!-- 引入扫描器 -->
	<context:component-scan base-package="cn.tedu.nybike">
		<!-- 除了controller不扫描，其余的全部需要扫描 -->
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>



	<!-- 引入dbconflig.properties配置文件 -->
	<context:property-placeholder
		location="classpath:jdbc.properties" />
		<!-- spring主要是配置与业务逻辑有关的请求，比如数据源，业务控制等 -->
	<bean id="ComboPooledDataSource"
		class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="jdbcUrl" value="${url}"></property>
		<property name="driverClass" value="${driver}"></property>
		<property name="user" value="${username}"></property>
		<property name="password" value="${password}"></property>
	</bean>



	<!-- 配置和mybatis的整合 -->
	<bean id="SqlSessionFactoryBean"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 指定mybatis全局配置文件的位置 -->
		<property name="configLocation"
			value="classpath:conf/mybatis-config.xml"></property>
		<!-- 配置数据源 -->
		<property name="dataSource" ref="ComboPooledDataSource"></property>
		<!-- 指定mybatis的mapper文件 -->
		<property name="mapperLocations" value="classpath:mapper/*.xml"></property>
	</bean>


	<!-- 配置扫描器，将mybatis接口的实现加入到ioc容器中 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
	<!-- 注入sqlSessionFactory -->
		<property name="sqlSessionFactoryBeanName"
			value="SqlSessionFactoryBean" />
		<!--扫描所有的Mapper接口，加入到ioc容器中 -->
		<property name="basePackage" value="cn.tedu.nybike.mapper"></property>
	</bean>
	
	
	
	<!-- 配置一个可以批量执行的sqlSession -->
	<bean id="SqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
	<constructor-arg name="sqlSessionFactory"  ref="SqlSessionFactoryBean"></constructor-arg>
	<constructor-arg name="executorType"  value="BATCH"></constructor-arg>
	</bean>
	
	
	
	<!-- 事务控制 -->
	<bean id="DataSourceTransactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<!-- 控制住数据源 所以先连接数据源ComboPooledDataSource -->
		<property name="dataSource" ref="ComboPooledDataSource"></property>
	</bean>
	<!-- 开启基于注解的事务，使用xml的形式的事务（比较重要的事务都会用xml配置的方式） -->
	<aop:config>
		<!-- 切入点表达式 execution(* com.service..*()):所有com.service下的所有类以及所有方法,而（...）表示方法中的参数任意 -->
		<aop:pointcut
			expression="execution(* cn.tedu.nybike..*(..))" id="txPoint" />
		<!-- 配置事务增强 -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPoint" />
	</aop:config>
	<!-- 配置事务增强，事务如何切入也就是事务增强之后如何进行切入 -->
	<tx:advice id="txAdvice" transaction-manager="DataSourceTransactionManager">
		<tx:attributes>
			<!-- 所有的方法都是事务方法 -->
			<tx:method name="*" />
			<!-- get开始的所有方法 -->
			<tx:method name="get*" read-only="true" />
		</tx:attributes>
	</tx:advice>
	

		
</beans>